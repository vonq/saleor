# # Generated by Django 3.1.3 on 2020-12-01 16:03
import mptt
from django.db import migrations, models
import django.db.models.deletion

# getting error on save when importing mptt model using app registry
from mptt import managers


class Migration(migrations.Migration):
    def migrate_job_functions(app_registry, schema_editor):
        JobFunction = app_registry.get_model("products", "JobFunction")
        JobFunctionTree = app_registry.get_model("products", "JobFunctionTree")

        manager = managers.TreeManager()
        manager.model = JobFunctionTree

        mptt.register(JobFunctionTree)

        manager.contribute_to_class(JobFunctionTree, "objects")
        manager.rebuild()

        def mptt_jf_from_flat_jf(job_function: JobFunction) -> JobFunctionTree:
            existing_mptt_jf = JobFunctionTree.objects.filter(
                pk=job_function.pk
            ).first()
            if existing_mptt_jf is not None:
                return existing_mptt_jf

            new_mptt_jf = JobFunctionTree(
                pk=job_function.pk,
                name=job_function.name,
                name_en=job_function.name_en,
                name_nl=job_function.name_nl,
                name_de=job_function.name_de,
            )
            if job_function.parent:
                new_mptt_jf.parent = mptt_jf_from_flat_jf(
                    JobFunction.objects.filter(pk=job_function.parent.id).first()
                )
            else:
                new_mptt_jf.parent = None
            new_mptt_jf.save()
            return new_mptt_jf

        for job_function in JobFunction.objects.all():
            mptt_jf_from_flat_jf(job_function)

    def migrate_product_job_functions(app_registry, schema_editor):
        Product = app_registry.get_model("products", "Product")
        JobFunctionTree = app_registry.get_model("products", "JobFunctionTree")

        for product in Product.objects.all():
            if product.job_functions.all().count() == 0:
                continue

            jfs = list(product.job_functions.all())
            product.job_functions.clear()
            for job_function in jfs:
                product.job_functions.add(
                    JobFunctionTree.objects.get(pk=job_function.pk)
                )
            product.save()

    def migrate_job_title_job_functions(app_registry, schema_editor):
        JobTitle = app_registry.get_model("products", "JobTitle")
        JobFunctionTree = app_registry.get_model("products", "JobFunctionTree")
        for product in JobTitle.objects.all():
            if product.job_functions.all().count() == 0:
                continue

            tree_job_functions = []
            for job_function in product.job_functions:
                tree_job_functions.append(
                    JobFunctionTree.objects.get(pk=job_function.pk)
                )
            product.job_functions.set(tree_job_functions)
            product.save()

    dependencies = [
        ("products", "0042_product_order_frequency"),
    ]

    operations = [
        migrations.CreateModel(
            name="JobFunctionTree",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, null=True)),
                ("name_en", models.CharField(max_length=100, null=True)),
                ("name_de", models.CharField(max_length=100, null=True)),
                ("name_nl", models.CharField(max_length=100, null=True)),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="products.jobfunctiontree",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.RunPython(
            migrate_job_functions, reverse_code=migrations.RunPython.noop
        ),
        migrations.DeleteModel("JobFunction"),
        migrations.RenameModel("JobFunctionTree", "JobFunction"),
    ]
